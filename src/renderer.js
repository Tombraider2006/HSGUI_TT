const { ipcRenderer } = require('electron');

// Check if ipcRenderer is available
if (!ipcRenderer) {
    console.error('ipcRenderer is not available');
}

let isConnected = false;
let currentLanguage = 'ru';
let translations = {};
let appVersion = '1.0.0'; // Default version
let selectedComponents = new Set();
let selectedForRemoval = new Set();

// Load translations
async function loadTranslations(lang) {
    try {
        // Load translations from the correct path
        const response = await fetch(`./src/locales/${lang}.json`);
                if (response.ok) {
                    translations[lang] = await response.json();
        } else {
            throw new Error(`Failed to load translations: ${response.status}`);
        }
    } catch (error) {
        console.error(`Error loading translations for ${lang}:`, error);
        // Fallback to embedded translations
        translations[lang] = getFallbackTranslations(lang);
    }
}

// Fallback translations if files can't be loaded
function getFallbackTranslations(lang) {
    if (lang === 'ru') {
        return {
            nav: { 
                main: "–ì–ª–∞–≤–Ω–∞—è", 
                install: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞", 
                remove: "–£–¥–∞–ª–µ–Ω–∏–µ", 
                customize: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞", 
                backup: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", 
                tools: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", 
                info: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                components: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
                tools_group: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
            },
            main: { 
                title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Creality Helper", 
                description: "–ü—Ä–æ—Å—Ç–æ–µ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º 3D-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–º Creality", 
                connection: "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É", 
                ip: "IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞:", 
                port: "–ü–æ—Ä—Ç:", 
                username: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", 
                password: "–ü–∞—Ä–æ–ª—å:", 
                connect: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 
                clear_ssh: "üîë –û—á–∏—Å—Ç–∏—Ç—å SSH",
                auto_detect: "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
            },
            install: { title: "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", description: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –≤–∞—à –ø—Ä–∏–Ω—Ç–µ—Ä", model: "–ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞:", auto_detect: "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", selected: "–í—ã–±—Ä–∞–Ω–æ:", select_all: "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", select_none: "–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ", install_selected: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ" },
            remove: { 
                title: "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", 
                description: "–£–¥–∞–ª–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞",
                selected: "–í—ã–±—Ä–∞–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                select_all: "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
                select_none: "–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ",
                remove_selected: "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
                no_installed: "–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                checking_components: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...",
                remove_success: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                remove_error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞",
                confirm_remove: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã?",
                removing: "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
            },
            customize: { 
                title: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", 
                description: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                system_info: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
                system_info_desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ –∏ —Å–∏—Å—Ç–µ–º–µ",
                logs: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤",
                logs_desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ –∏ –ª–æ–≥–æ–≤ Klipper",
                services: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
                services_desc: "–ó–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤",
                files: "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
                files_desc: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                network: "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                network_desc: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                performance: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                performance_desc: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤",
            },
            backup: { title: "üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", description: "–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞", create: "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", restore: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" },
            tools: { 
                title: "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", 
                description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º",
                prevent_klipper: "üîí –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                prevent_klipper_desc: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Klipper",
                allow_klipper: "üîì –†–∞–∑—Ä–µ—à–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                allow_klipper_desc: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Klipper",
                fix_gcode: "üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç—å",
                fix_gcode_desc: "Gcode —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏",
                enable_camera: "üì∑ –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É",
                enable_camera_desc: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –≤ Moonraker",
                disable_camera: "üì∑ –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É",
                disable_camera_desc: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –≤ Moonraker",
                restart_nginx: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Nginx",
                restart_nginx_desc: "–°–µ—Ä–≤–∏—Å Nginx",
                restart_moonraker: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Moonraker",
                restart_moonraker_desc: "–°–µ—Ä–≤–∏—Å Moonraker",
                restart_klipper: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Klipper",
                restart_klipper_desc: "–°–µ—Ä–≤–∏—Å Klipper",
                update_entware: "üì¶ –û–±–Ω–æ–≤–∏—Ç—å Entware",
                update_entware_desc: "–ü–∞–∫–µ—Ç—ã Entware",
                clear_cache: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à",
                clear_cache_desc: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∫—ç—à",
                clear_logs: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
                clear_logs_desc: "–§–∞–π–ª—ã –ª–æ–≥–æ–≤",
                restore_firmware: "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É",
                restore_firmware_desc: "–ü—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é",
                factory_reset: "üè≠ –°–±—Ä–æ—Å –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º",
                factory_reset_desc: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞–º"
            },
            info: { title: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", version: "–í–µ—Ä—Å–∏—è", author: "–ê–≤—Ç–æ—Ä", license: "–õ–∏—Ü–µ–Ω–∑–∏—è", support: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" },
            models: { k1: "K1", "k1-max": "K1 Max", k1c: "K1C", k1se: "K1SE", k1s: "K1S", "ender-3-v3": "Ender-3 V3", "ender-3-v3-se": "Ender-3 V3 SE", "ender-3-v3-ke": "Ender-3 V3 KE", e5m: "Ender 5 Max" },
            messages: { connection_success: "–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É!", connection_error: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", model_detected: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å:", model_undefined: "–ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", select_components: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏", connect_first: "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É", installation_complete: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", backup_created: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ", backup_restored: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", connected: "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ", disconnected: "–û—Ç–∫–ª—é—á–µ–Ω" },
            categories: { core: "–û—Å–Ω–æ–≤–Ω—ã–µ", remote: "–£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", tools: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", customization: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞" }
        };
    } else {
        return {
            nav: { main: "Main", install: "Install", remove: "Remove", customize: "Customize", backup: "Backup", tools: "Tools", info: "Info" },
            main: { title: "Welcome to Creality Helper", description: "Simple and intuitive control of your Creality 3D printer", connection: "üîå Connect to printer", ip: "Printer IP address:", port: "Port:", username: "Username:", password: "Password:", connect: "Connect", clear_ssh: "üîë Clear SSH" },
            install: { title: "üì¶ Install Components", description: "Select components to install on your printer", model: "Printer model:", auto_detect: "Auto-detect", selected: "Selected:", select_all: "Select All", select_none: "Deselect All", install_selected: "Install Selected" },
            remove: { title: "üóëÔ∏è Remove Components", description: "Remove installed components from printer" },
            customize: { title: "‚öôÔ∏è Customize Components", description: "Configure installed component settings" },
            backup: { title: "üíæ Backup", description: "Create a backup of printer configuration", create: "Create Backup", restore: "Restore from Backup" },
            tools: { title: "üîß Tools", description: "Additional tools for working with printer", diagnostic: "üîç Diagnostic", diagnostic_desc: "Check printer status", update: "üîÑ Update", update_desc: "Update printer firmware", logs: "üìã Logs", logs_desc: "View system logs", info: "‚ÑπÔ∏è Info", info_desc: "System information" },
            info: { title: "‚ÑπÔ∏è Application Information", version: "Version", author: "Author", license: "License", support: "Support" },
            models: { k1: "K1", "k1-max": "K1 Max", k1c: "K1C", k1se: "K1SE", k1s: "K1S", "ender-3-v3": "Ender-3 V3", "ender-3-v3-se": "Ender-3 V3 SE", "ender-3-v3-ke": "Ender-3 V3 KE", e5m: "Ender 5 Max" },
            messages: { connection_success: "Successfully connected to printer!", connection_error: "Connection error", model_detected: "Detected model:", model_undefined: "Printer model not detected", select_components: "Select components to install", connect_first: "Connect to printer first", installation_complete: "Installation complete!", backup_created: "Backup created successfully", backup_restored: "Backup restored successfully", connected: "Connected", disconnected: "Disconnected" },
            categories: { core: "Core", remote: "Remote Control", tools: "Tools", customization: "Customization" }
        };
    }
}

// Translate text
function t(key, lang = currentLanguage) {
    const keys = key.split('.');
    let value = translations[lang];
    
    for (const k of keys) {
        if (value && value[k]) {
            value = value[k];
        } else {
            return key; // Return key if translation not found
        }
    }
    
    return value;
}

// Update all text elements
function updateLanguage() {
    // Update all elements with data-i18n attribute
    document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.getAttribute('data-i18n');
        const translation = t(key);
        
        // Check if element is input placeholder
        if (element.tagName === 'INPUT' && element.type !== 'submit' && element.type !== 'button') {
            element.placeholder = translation;
        } else {
            element.textContent = translation;
        }
    });
    
    // Update model selector options
    const modelSelector = document.getElementById('modelSelector');
    if (modelSelector) {
        Array.from(modelSelector.options).forEach(option => {
            if (option.value !== 'auto') {
                option.textContent = t(`models.${option.value}`);
            } else {
                option.textContent = t('install.auto_detect');
            }
        });
    }
    
    // Update header model selector options
    const headerModelSelector = document.getElementById('headerModelSelector');
    if (headerModelSelector) {
        Array.from(headerModelSelector.options).forEach(option => {
            if (option.value !== 'auto') {
                option.textContent = t(`models.${option.value}`);
            } else {
                option.textContent = t('install.auto_detect');
            }
        });
    }
    
    // Update status text
    const connectionText = document.getElementById('connectionText');
    if (connectionText) {
        if (isConnected) {
            connectionText.textContent = t('messages.connected') || '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
        } else {
            connectionText.textContent = t('messages.disconnected') || '–û—Ç–∫–ª—é—á–µ–Ω';
        }
    }
    
    // Update document title
    document.title = t('app.title') || 'Creality Helper Simple';
}

// Language switching
async function setLanguage(lang) {
    currentLanguage = lang;
    
    // Update active button
    document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[onclick="setLanguage('${lang}')"]`).classList.add('active');
    
    // Save language preference
    localStorage.setItem('selectedLanguage', lang);
    
    // Load translations if not already loaded
    if (!translations[lang]) {
        await loadTranslations(lang);
    }
    
    // Update all text elements
    updateLanguage();
    
    console.log('Switched to language:', lang);
}

// Page navigation
function showPage(pageId) {
    // Hide all pages
    document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
    
    // Show selected page
    document.getElementById(pageId + 'Page').classList.add('active');
    
    // Update navigation
    document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
    const activeNavItem = document.querySelector(`[onclick*="showPage('${pageId}')"]`);
    if (activeNavItem) {
        activeNavItem.classList.add('active');
    }
    
    // Load page-specific content
    if (pageId === 'install') {
        loadComponents();
    } else if (pageId === 'remove') {
        loadInstalledComponents();
    } else if (pageId === 'customize') {
        loadCustomizeOptions();
    }
    
    // Update language for all pages
    updateLanguage();
}

// Connection functions
async function connectToPrinter() {
    const host = document.getElementById('printerIP').value;
    const port = parseInt(document.getElementById('printerPort').value);
    const username = document.getElementById('printerUser').value;
    const password = document.getElementById('printerPass').value;
    
    // Validate connection data
    if (!host || !username || !password) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
        return;
    }
    
    // Validate IP address format
    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    if (!ipRegex.test(host)) {
        showMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞', 'error');
        return;
    }
    
    // Validate port number
    if (!port || port <= 0 || port > 65535) {
        showMessage('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535', 'error');
        return;
    }
    
    // Validate username (no special characters)
    const usernameRegex = /^[a-zA-Z0-9_-]+$/;
    if (!usernameRegex.test(username)) {
        showMessage('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã', 'error');
        return;
    }
    
    // Validate password (not empty, no XSS attempts)
    const xssRegex = /<script|javascript:|onerror|onload|onclick|onmouseover|iframe.*src.*javascript/i;
    if (xssRegex.test(password)) {
        showMessage('–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã', 'error');
        return;
    }
    
    // Save connection data
    saveData();

    const connectBtn = document.querySelector('.btn-primary');
    const statusIndicator = document.getElementById('connectionStatus');
    const statusText = document.getElementById('connectionText');

    // Show loading
    connectBtn.innerHTML = '<span class="loading"></span> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    connectBtn.disabled = true;

    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º SSH –∫–ª—é—á —Ö–æ—Å—Ç–∞
        showMessage('–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–∞ —Ö–æ—Å—Ç–∞...', 'info');
        const hostCheck = await safeInvoke('ssh-check-host', {
            host, port, username, password
        });
        
        if (!hostCheck.success) {
            showMessage('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ' + hostCheck.error, 'warning');
        } else {
            showMessage('SSH –∫–ª—é—á —Ö–æ—Å—Ç–∞ –ø—Ä–∏–Ω—è—Ç', 'success');
        }
        
        // –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        showMessage('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É...', 'info');
        const result = await safeInvoke('ssh-connect', {
            host, port, username, password
        });
        
        if (result.success) {
            isConnected = true;
            statusIndicator.classList.remove('disconnected');
            statusIndicator.classList.add('connected');
            statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            
            showMessage('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É!', 'success');
            
            // Detect printer model
            showMessage('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞...', 'info');
            await detectPrinterModel();
            
            if (currentPrinterModel) {
                showMessage(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: ${printerConfigs[currentPrinterModel]?.name}`, 'success');
            } else {
                showMessage('–ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏.', 'warning');
            }
            
            // Check if helper scripts exist on printer
            showMessage('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ...', 'info');
            try {
                const checkScriptsResult = await safeInvoke('ssh-exec', 'test -f /usr/data/helper-script/scripts/original_helper.sh && echo "exists" || echo "missing"');
                
                if (checkScriptsResult.stdout.includes('exists')) {
                    showMessage('–°–∫—Ä–∏–ø—Ç—ã helper-script –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ', 'success');
                } else {
                    showMessage('–°–∫—Ä–∏–ø—Ç—ã helper-script –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.', 'info');
                }
            } catch (error) {
                showMessage('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤: ' + error.message, 'warning');
            }
            
            // Restore connect button after successful connection
            connectBtn.innerHTML = 'üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
            connectBtn.disabled = false;
        } else {
            throw new Error(result.error);
        }
        
    } catch (error) {
        console.error('Connection failed:', error);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ SSH
        let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message;
        
        if (error.message.includes('Host key verification failed')) {
            errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH –∫–ª—é—á–∞ —Ö–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        } else if (error.message.includes('Connection refused')) {
            errorMessage = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç.';
        } else if (error.message.includes('Authentication failed')) {
            errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.';
        } else if (error.message.includes('timeout')) {
            errorMessage = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        }
        
        showMessage(errorMessage, 'error');
        
        connectBtn.innerHTML = 'üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
        connectBtn.disabled = false;
    }
}

// –û—á–∏—Å—Ç–∫–∞ SSH –∫–ª—é—á–µ–π —Ö–æ—Å—Ç–∞
async function clearSSHKeys() {
    const host = document.getElementById('printerIP').value;
    if (!host) {
        showMessage('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞', 'warning');
        return;
    }

    const clearBtn = document.querySelector('.btn-warning');
    const originalText = clearBtn.innerHTML;
    
    try {
        clearBtn.innerHTML = '<span class="loading"></span> –û—á–∏—Å—Ç–∫–∞...';
        clearBtn.disabled = true;

        const result = await safeInvoke('ssh-clear-host', host);
        
        if (result.success) {
            showMessage('SSH –∫–ª—é—á–∏ —Ö–æ—Å—Ç–∞ –æ—á–∏—â–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.', 'success');
        } else {
            showMessage('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ' + result.error, 'warning');
        }
    } catch (error) {
        console.error('Clear SSH keys failed:', error);
        showMessage('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ SSH –∫–ª—é—á–µ–π: ' + error.message, 'error');
    } finally {
        clearBtn.innerHTML = originalText;
        clearBtn.disabled = false;
    }
}

// Show message function
function showMessage(message, type) {
    // Remove existing messages
    const existingMessages = document.querySelectorAll('.success-message, .error-message, .info-message, .warning-message');
    existingMessages.forEach(msg => msg.remove());
    
    const messageDiv = document.createElement('div');
    messageDiv.className = type + '-message';
    messageDiv.textContent = message;
    
    const connectionForm = document.querySelector('.connection-form');
    if (connectionForm) {
        connectionForm.appendChild(messageDiv);
    } else {
        document.body.appendChild(messageDiv);
    }
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.remove();
        }
    }, 5000);
}

// Show loading state
function showLoading(containerId, message) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    container.innerHTML = `
        <div class="loading-container">
            <span class="loading"></span>
            <p>${message}</p>
        </div>
    `;
}

// Get localized text (alias for t function)
function getLocalizedText(key) {
    const translation = t(key);
    // If translation is the same as key, it means translation not found
    if (translation === key) {
        // Return fallback values for common keys
        const fallbacks = {
            'customize.system.printer_model': '–ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞',
            'customize.system.kernel_version': '–í–µ—Ä—Å–∏—è —è–¥—Ä–∞',
            'customize.system.klipper_version': '–í–µ—Ä—Å–∏—è Klipper',
            'customize.system.moonraker_version': '–í–µ—Ä—Å–∏—è Moonraker',
            'customize.system.fluidd_version': '–í–µ—Ä—Å–∏—è Fluidd',
            'customize.system.mainsail_version': '–í–µ—Ä—Å–∏—è Mainsail',
            'customize.system.os_version': '–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã',
            'customize.system.architecture': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
            'customize.system.uptime': '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
            'customize.system.memory': '–ü–∞–º—è—Ç—å',
            'customize.system.disk': '–î–∏—Å–∫',
            'customize.system.cpu_load': '–ù–∞–≥—Ä—É–∑–∫–∞ CPU',
            'customize.system.unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'customize.system.not_installed': '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'customize.system.active': '–ê–∫—Ç–∏–≤–µ–Ω',
            'customize.system.inactive': '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
            'customize.system_info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ',
            'tools.back': '–ù–∞–∑–∞–¥',
            'tools.factory_reset': '–°–±—Ä–æ—Å –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
            'models.e5m': 'Ender 5 Max'
        };
        return fallbacks[key] || key;
    }
    return translation;
}

// Safe ipcRenderer invoke wrapper
async function safeInvoke(channel, ...args) {
    if (!ipcRenderer || !ipcRenderer.invoke) {
        console.error('ipcRenderer is not available');
        throw new Error('IPC –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    return await ipcRenderer.invoke(channel, ...args);
}

// Current printer model
let currentPrinterModel = null;

// Load saved connection data
function loadSavedData() {
    const savedData = localStorage.getItem('crealityHelperData');
    if (savedData) {
        try {
            const data = JSON.parse(savedData);
            
            // Validate and sanitize loaded data
            if (data.ipAddress && /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(data.ipAddress)) {
                document.getElementById('printerIP').value = data.ipAddress;
            }
            
            if (data.username && /^[a-zA-Z0-9_-]+$/.test(data.username)) {
                document.getElementById('printerUser').value = data.username;
            }
            
            if (data.password && typeof data.password === 'string') {
                // Check for XSS attempts
                const xssRegex = /<script|javascript:|onerror|onload|onclick|onmouseover|iframe.*src.*javascript/i;
                if (!xssRegex.test(data.password)) {
                    document.getElementById('printerPass').value = data.password;
                } else {
                    console.warn('Potentially malicious password detected in saved data, not loading');
                }
            }
            
            if (data.lastModel && typeof data.lastModel === 'string' && printerConfigs[data.lastModel]) {
                currentPrinterModel = data.lastModel;
                updatePrinterModelDisplay();
            }
        } catch (error) {
            console.error('Error loading saved data:', error);
            // Clear corrupted data
            localStorage.removeItem('crealityHelperData');
        }
    }
}

// Save connection data
function saveData() {
    try {
        const data = {
            ipAddress: document.getElementById('printerIP').value,
            username: document.getElementById('printerUser').value,
            password: document.getElementById('printerPass').value,
            lastModel: currentPrinterModel
        };
        
        // Validate data before saving
        if (data.ipAddress && !/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(data.ipAddress)) {
            console.warn('Invalid IP address format, not saving');
            return;
        }
        
        if (data.username && !/^[a-zA-Z0-9_-]+$/.test(data.username)) {
            console.warn('Invalid username format, not saving');
            return;
        }
        
        // Check for XSS attempts in password
        const xssRegex = /<script|javascript:|onerror|onload|onclick|onmouseover|iframe.*src.*javascript/i;
        if (data.password && xssRegex.test(data.password)) {
            console.warn('Potentially malicious password detected, not saving');
            return;
        }
        
        localStorage.setItem('crealityHelperData', JSON.stringify(data));
    } catch (error) {
        console.error('Error saving data:', error);
    }
}

// Printer model configurations
const printerConfigs = {
    'k1': {
        name: 'K1 Series',
        minFirmware: '1.3.3.5',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'nozzle-cleaning',
            'fans-control', 'improved-shapers', 'useful-macros',
            'save-z-offset', 'screws-tilt', 'm600-support',
            'git-backup', 'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'buzzer', 'useful-macros', 'save-z-offset'
        ]
    },
    'k1-max': {
        name: 'K1 Max',
        minFirmware: '1.3.3.5',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'nozzle-cleaning',
            'fans-control', 'improved-shapers', 'useful-macros',
            'save-z-offset', 'screws-tilt', 'm600-support',
            'git-backup', 'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'buzzer', 'useful-macros', 'save-z-offset',
            'timelapse', 'camera-settings'
        ]
    },
    'k1c': {
        name: 'K1C',
        minFirmware: '1.3.3.5',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'nozzle-cleaning',
            'fans-control', 'improved-shapers', 'useful-macros',
            'save-z-offset', 'screws-tilt', 'm600-support',
            'git-backup', 'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'buzzer', 'useful-macros', 'save-z-offset',
            'timelapse', 'camera-settings'
        ]
    },
    'ender-3-v3': {
        name: 'Ender-3 V3',
        minFirmware: '1.2.1.3',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'fans-control',
            'improved-shapers', 'useful-macros', 'save-z-offset',
            'screws-tilt', 'm600-support', 'git-backup',
            'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'useful-macros', 'save-z-offset'
        ]
    },
    'ender-3-v3-se': {
        name: 'Ender-3 V3 SE',
        minFirmware: '1.2.1.3',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'fans-control',
            'improved-shapers', 'useful-macros', 'save-z-offset',
            'screws-tilt', 'm600-support', 'git-backup',
            'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'useful-macros', 'save-z-offset'
        ]
    },
    'ender-3-v3-ke': {
        name: 'Ender-3 V3 KE',
        minFirmware: '1.2.1.3',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'fans-control',
            'improved-shapers', 'useful-macros', 'save-z-offset',
            'screws-tilt', 'm600-support', 'git-backup',
            'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'useful-macros', 'save-z-offset'
        ]
    },
    'k1s': {
        name: 'K1S',
        minFirmware: '1.3.3.5',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'nozzle-cleaning',
            'fans-control', 'improved-shapers', 'useful-macros',
            'save-z-offset', 'screws-tilt', 'm600-support',
            'git-backup', 'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–Ω–∫—Ç—ã 8 (nozzle-cleaning) –∏ 9 (fans-control)
        excludedComponents: ['nozzle-cleaning', 'fans-control'],
        // –ù–µ –æ—Ç–º–µ—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É–Ω–∫—Ç 16 (camera-settings)
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'buzzer', 'useful-macros', 'save-z-offset',
            'timelapse' // camera-settings –Ω–µ –≤–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ]
    },
    'k1se': {
        name: 'K1SE',
        minFirmware: '1.3.3.5',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'nozzle-cleaning',
            'fans-control', 'improved-shapers', 'useful-macros',
            'save-z-offset', 'screws-tilt', 'm600-support',
            'git-backup', 'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–Ω–∫—Ç—ã 8 (nozzle-cleaning) –∏ 9 (fans-control)
        excludedComponents: ['nozzle-cleaning', 'fans-control'],
        // –ù–µ –æ—Ç–º–µ—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É–Ω–∫—Ç 16 (camera-settings)
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'buzzer', 'useful-macros', 'save-z-offset',
            'timelapse' // camera-settings –Ω–µ –≤–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ]
    },
    'e5m': {
        name: 'Ender 5 Max',
        minFirmware: '1.2.1.3',
        components: [
            'moonraker-nginx', 'fluidd', 'mainsail', 'entware',
            'klipper-shell', 'kamp', 'buzzer', 'fans-control',
            'improved-shapers', 'useful-macros', 'save-z-offset',
            'screws-tilt', 'm600-support', 'git-backup',
            'timelapse', 'camera-settings', 'usb-camera',
            'octoeverywhere', 'moonraker-obico', 'guppyflo',
            'mobileraker', 'octoapp', 'simplyprint'
        ],
        defaultComponents: [
            'moonraker-nginx', 'fluidd', 'entware', 'klipper-shell',
            'kamp', 'useful-macros', 'save-z-offset'
        ]
    }
};

// Components data - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ Creality Helper Script
const components = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    {
        id: 'moonraker-nginx',
        name: 'Moonraker –∏ Nginx',
        description: '–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä',
        category: 'core',
        installed: false
    },
    {
        id: 'fluidd',
        name: 'Fluidd',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º (–ø–æ—Ä—Ç 4408)',
        category: 'ui',
        installed: false
    },
    {
        id: 'mainsail',
        name: 'Mainsail',
        description: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–æ—Ä—Ç 4409)',
        category: 'ui',
        installed: false
    },
    {
        id: 'entware',
        name: 'Entware',
        description: '–ü–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–û',
        category: 'tools',
        installed: false
    },
    
    // Klipper –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    {
        id: 'klipper-shell',
        name: 'Klipper Gcode Shell Command',
        description: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ–±–æ–ª–æ—á–∫–∏ –∏–∑ G-–∫–æ–¥–∞',
        category: 'klipper',
        installed: false
    },
    {
        id: 'kamp',
        name: 'Klipper Adaptive Meshing & Purging',
        description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å—Ç–æ–ª–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–æ–ø–ª–∞',
        category: 'klipper',
        installed: false
    },
    {
        id: 'buzzer',
        name: 'Buzzer Support',
        description: '–ó–≤—É–∫–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞',
        category: 'hardware',
        installed: false
    },
    {
        id: 'nozzle-cleaning',
        name: 'Nozzle Cleaning Fan Control',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–ø–ª–∞',
        category: 'hardware',
        installed: false
    },
    {
        id: 'fans-control',
        name: 'Fans Control Macros',
        description: '–ú–∞–∫—Ä–æ—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞–º–∏',
        category: 'klipper',
        installed: false
    },
    {
        id: 'improved-shapers',
        name: 'Improved Shapers Calibrations',
        description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —à–µ–π–ø–µ—Ä–æ–≤',
        category: 'klipper',
        installed: false
    },
    {
        id: 'useful-macros',
        name: 'Useful Macros',
        description: '–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –¥–ª—è –ø–µ—á–∞—Ç–∏',
        category: 'klipper',
        installed: false
    },
    {
        id: 'save-z-offset',
        name: 'Save Z-Offset Macros',
        description: '–ú–∞–∫—Ä–æ—Å—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Z-—Å–º–µ—â–µ–Ω–∏—è',
        category: 'klipper',
        installed: false
    },
    {
        id: 'screws-tilt',
        name: 'Screws Tilt Adjust Support',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–Ω—Ç–æ–≤ —Å—Ç–æ–ª–∞',
        category: 'klipper',
        installed: false
    },
    {
        id: 'm600-support',
        name: 'M600 Support',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–º–µ–Ω—ã –Ω–∏—Ç–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏',
        category: 'klipper',
        installed: false
    },
    
    // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    {
        id: 'git-backup',
        name: 'Git Backup',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Git',
        category: 'backup',
        installed: false
    },
    
    // –ö–∞–º–µ—Ä–∞ –∏ —Ç–∞–π–º–ª–∞–ø—Å
    {
        id: 'timelapse',
        name: 'Moonraker Timelapse',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–ª–∞–ø—Å –≤–∏–¥–µ–æ –ø–µ—á–∞—Ç–∏',
        category: 'camera',
        installed: false
    },
    {
        id: 'camera-settings',
        name: 'Camera Settings Control',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞–º–µ—Ä—ã',
        category: 'camera',
        installed: false
    },
    {
        id: 'usb-camera',
        name: 'USB Camera Support',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ USB –∫–∞–º–µ—Ä—ã',
        category: 'camera',
        installed: false
    },
    
    // –£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    {
        id: 'octoeverywhere',
        name: 'OctoEverywhere',
        description: '–£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É —á–µ—Ä–µ–∑ –æ–±–ª–∞–∫–æ',
        category: 'remote',
        installed: false
    },
    {
        id: 'moonraker-obico',
        name: 'Moonraker Obico',
        description: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å',
        category: 'remote',
        installed: false
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    {
        id: 'guppyflo',
        name: 'GuppyFLO',
        description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
        category: 'tools',
        installed: false
    },
    {
        id: 'mobileraker',
        name: 'Mobileraker Companion',
        description: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        category: 'mobile',
        installed: false
    },
    {
        id: 'octoapp',
        name: 'OctoApp Companion',
        description: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OctoApp',
        category: 'mobile',
        installed: false
    },
    {
        id: 'simplyprint',
        name: 'SimplyPrint',
        description: '–û–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏',
        category: 'remote',
        installed: false
    }
];

// Update version display
function updateVersionDisplay() {
    const versionElement = document.getElementById('appVersion');
    if (versionElement) {
        versionElement.textContent = appVersion;
    }
}

// Fallback help content
function getFallbackHelpContent() {
    return {
        ru: {
            'moonraker-nginx': {
                title: 'Moonraker + Nginx',
                description: '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º',
                details: 'Moonraker –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º, –∞ Nginx —Å–ª—É–∂–∏—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.',
                features: ['–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–º–µ—Ä—ã', '–£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
                requirements: ['–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', '–ü–æ—Ä—Ç—ã 80, 443', '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ'],
                warnings: ['–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–æ–≤', '–ú–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏'],
                troubleshooting: [
                    { problem: '–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', solution: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–æ–≤ –∏ —Ñ–∞–π—Ä–≤–æ–ª–∞' },
                    { problem: '–û—à–∏–±–∫–∞ 502', solution: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Nginx –∏ Moonraker' }
                ]
            }
        },
        en: {
            'moonraker-nginx': {
                title: 'Moonraker + Nginx',
                description: 'Web interface for printer management',
                details: 'Moonraker provides API for printer control, Nginx serves as web server for the interface.',
                features: ['Web interface', 'Control API', 'Camera support', 'Remote control'],
                requirements: ['Stable internet connection', 'Ports 80, 443', 'Sufficient disk space'],
                warnings: ['Requires port configuration', 'May conflict with other services'],
                troubleshooting: [
                    { problem: 'Web interface not opening', solution: 'Check port and firewall settings' },
                    { problem: 'Error 502', solution: 'Restart Nginx and Moonraker' }
                ]
            }
        }
    };
}

// Load app version from package.json
async function loadAppVersion() {
    try {
        const response = await fetch('./package.json');
        if (response.ok) {
            const packageData = await response.json();
            appVersion = packageData.version || '1.0.0';
        }
    } catch (error) {
        console.error('Error loading app version:', error);
        appVersion = '1.0.0';
    }
}

// Initialize app
document.addEventListener('DOMContentLoaded', async function() {
    console.log('Creality Helper Simple loaded');
    
    // Load app version
    await loadAppVersion();
    
    // Load translations
    await loadTranslations('ru');
    await loadTranslations('en');
    
    // Load saved language preference
    const savedLanguage = localStorage.getItem('selectedLanguage') || 'ru';
    currentLanguage = savedLanguage;
    
    // Update language
    updateLanguage();
    
    // Update active language button
    document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.remove('active'));
    const activeBtn = document.querySelector(`[onclick="setLanguage('${savedLanguage}')"]`);
    if (activeBtn) {
        activeBtn.classList.add('active');
    }
    
    // Update version display
    updateVersionDisplay();
    
    // Load saved data
    loadSavedData();
    
    // Initialize header model selector
    updatePrinterModelDisplay();
    
    // Check connection status on startup
    checkConnectionStatus();
});

async function checkConnectionStatus() {
    try {
        const result = await safeInvoke('check-connection');
        if (result.connected) {
            // Update UI to show connected state
            const statusIndicator = document.getElementById('connectionStatus');
            const statusText = document.getElementById('connectionText');
            
            statusIndicator.classList.remove('disconnected');
            statusIndicator.classList.add('connected');
            statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            
            isConnected = true;
        }
    } catch (error) {
        console.error('Error checking connection:', error);
    }
}

// Detect printer model via SSH
async function detectPrinterModel() {
    if (!isConnected) {
        currentPrinterModel = null;
        return null;
    }

    try {
        // Try to get printer model from various sources
        const commands = [
            'cat /proc/device-tree/model 2>/dev/null || echo "unknown"',
            'cat /sys/firmware/devicetree/base/model 2>/dev/null || echo "unknown"',
            'uname -m 2>/dev/null || echo "unknown"',
            'cat /etc/os-release | grep PRETTY_NAME 2>/dev/null || echo "unknown"'
        ];

        for (const cmd of commands) {
            try {
                const result = await safeInvoke('ssh-exec', cmd);
                const output = result.stdout.toLowerCase();
                
               // Detect K1 series first (more specific)
               if (output.includes('k1')) {
                   if (output.includes('max')) {
                       currentPrinterModel = 'k1-max';
                   } else if (output.includes('se')) {
                       currentPrinterModel = 'k1se';
                   } else if (output.includes('s') && !output.includes('se')) {
                       currentPrinterModel = 'k1s';
                   } else if (output.includes('c')) {
                       currentPrinterModel = 'k1c';
                   } else {
                       currentPrinterModel = 'k1';
                   }
                   break;
               }
                
                // Detect Ender-3 V3 series
                if (output.includes('ender') || output.includes('v3')) {
                    if (output.includes('se')) {
                        currentPrinterModel = 'ender-3-v3-se';
                    } else if (output.includes('ke')) {
                        currentPrinterModel = 'ender-3-v3-ke';
                    } else {
                        currentPrinterModel = 'ender-3-v3';
                    }
                    break;
                }
                
                // Detect Ender 5 Max
                if (output.includes('e5m') || output.includes('ender 5 max') || output.includes('ender5max')) {
                    currentPrinterModel = 'e5m';
                    break;
                }
                
                // Fallback for other Creality printers
                if (output.includes('creality') && !currentPrinterModel) {
                    currentPrinterModel = 'k1'; // Default to K1 for unknown Creality
                    break;
                }
            } catch (error) {
                console.log(`Command failed: ${cmd}`, error);
            }
        }

        // If no specific model detected, try to detect by available features
        if (!currentPrinterModel) {
            try {
                const buzzerCheck = await safeInvoke('ssh-exec', 'ls /dev/input/by-path/ | grep buzzer 2>/dev/null || echo "none"');
                if (buzzerCheck.stdout.includes('buzzer')) {
                    currentPrinterModel = 'k1'; // Default to K1 if buzzer found
                } else {
                    currentPrinterModel = 'ender-3-v3'; // Default to Ender-3 V3
                }
            } catch (error) {
                currentPrinterModel = 'ender-3-v3'; // Safe default
            }
        }

        updatePrinterModelDisplay();
        return currentPrinterModel;
    } catch (error) {
        console.error('Error detecting printer model:', error);
        currentPrinterModel = null;
        return null;
    }
}

// Auto-detect printer function for header button
async function autoDetectPrinter() {
    const detectBtn = document.getElementById('detectBtn');
    const originalText = detectBtn.innerHTML;
    
    // Show loading state
    detectBtn.innerHTML = 'üîç <span class="loading"></span> –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
    detectBtn.disabled = true;
    
    try {
        // First try to connect if not connected
        if (!isConnected) {
            const host = document.getElementById('printerIP').value;
            const port = parseInt(document.getElementById('printerPort').value);
            const username = document.getElementById('printerUser').value;
            const password = document.getElementById('printerPass').value;
            
            if (!host || !username || !password) {
                showMessage('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'warning');
                return;
            }
            
            // Try to connect
            await connectToPrinter();
            
            // Wait a bit for connection to establish
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        // Now try to detect model
        const detectedModel = await detectPrinterModel();
        
        if (detectedModel) {
            const modelName = printerConfigs[detectedModel]?.name || detectedModel;
            showMessage(`–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${modelName}`, 'success');
            
            // Update header selector
            const headerSelector = document.getElementById('headerModelSelector');
            if (headerSelector) {
                headerSelector.value = detectedModel;
            }
        } else {
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞', 'warning');
        }
        
    } catch (error) {
        console.error('Auto-detect error:', error);
        showMessage('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ' + error.message, 'error');
    } finally {
        // Restore button state
        detectBtn.innerHTML = originalText;
        detectBtn.disabled = false;
    }
}

// Change model from header selector
function changeHeaderModel() {
    const headerSelector = document.getElementById('headerModelSelector');
    const selectedModel = headerSelector.value;
    
    if (selectedModel === 'auto') {
        // Trigger auto-detection
        autoDetectPrinter();
    } else if (selectedModel && printerConfigs[selectedModel]) {
        currentPrinterModel = selectedModel;
        updatePrinterModelDisplay();
        loadComponents();
        
        const modelName = printerConfigs[selectedModel].name;
        showMessage(`–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${modelName}`, 'success');
    }
}

// Update printer model display
function updatePrinterModelDisplay() {
    const modelElement = document.getElementById('printerModel');
    const modelSelector = document.getElementById('modelSelector');
    const headerSelector = document.getElementById('headerModelSelector');
    
    if (currentPrinterModel && printerConfigs[currentPrinterModel]) {
        const modelName = printerConfigs[currentPrinterModel].name;
        
        // Update main model display
        if (modelElement) {
            modelElement.textContent = modelName;
        }
        
        // Update selectors
        if (modelSelector) {
            modelSelector.value = currentPrinterModel;
        }
        if (headerSelector) {
            headerSelector.value = currentPrinterModel;
        }
    } else {
        // Update main model display
        if (modelElement) {
        modelElement.textContent = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
        }
        
        // Update selectors to auto
        if (modelSelector) {
            modelSelector.value = 'auto';
        }
        if (headerSelector) {
            headerSelector.value = 'auto';
        }
    }
}

// Change model manually
function changeModel() {
    const modelSelector = document.getElementById('modelSelector');
    const headerSelector = document.getElementById('headerModelSelector');
    const selectedModel = modelSelector.value;
    
    if (selectedModel && selectedModel !== 'auto') {
        currentPrinterModel = selectedModel;
        updatePrinterModelDisplay();
        saveData();
        
        // Sync header selector
        if (headerSelector) {
            headerSelector.value = selectedModel;
        }
        
        // Load components for the selected model
        loadComponents();
        
        showMessage(`–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${printerConfigs[selectedModel]?.name || selectedModel}`, 'success');
    } else if (selectedModel === 'auto') {
        currentPrinterModel = null;
        updatePrinterModelDisplay();
        
        // Sync header selector
        if (headerSelector) {
            headerSelector.value = 'auto';
        }
        
        // Load all components for auto-detect
        loadComponents();
        
        showMessage('–†–µ–∂–∏–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏', 'info');
    }
}

// Get available components for current printer model
function getAvailableComponents() {
    if (!currentPrinterModel || !printerConfigs[currentPrinterModel]) {
        return components; // Return all components if model not detected
    }
    
    const config = printerConfigs[currentPrinterModel];
    return components.filter(component => {
        // Check if component is in the supported list
        const isSupported = config.components.includes(component.id);
        
        // Check if component is excluded for this model
        const isExcluded = config.excludedComponents && config.excludedComponents.includes(component.id);
        
        return isSupported && !isExcluded;
    });
}

// Load components for install page
function loadComponents() {
    const componentsGrid = document.getElementById('componentsGrid');
    if (!componentsGrid) {
        console.log('Components grid not found, skipping load');
        return;
    }
    
    const availableComponents = getAvailableComponents();
    console.log(`Loading ${availableComponents.length} components for model: ${currentPrinterModel || 'auto'}`);
    
    componentsGrid.innerHTML = '';
    
    availableComponents.forEach(component => {
        const componentCard = createComponentCard(component);
        componentsGrid.appendChild(componentCard);
    });
    
    updateBatchStats();
}

// Create component card
function createComponentCard(component) {
    const card = document.createElement('div');
    card.className = 'component-card';
    card.id = `component-${component.id}`;
    
    const config = printerConfigs[currentPrinterModel];
    const isExcluded = config && config.excludedComponents && config.excludedComponents.includes(component.id);
    const isDefault = config && config.defaultComponents && config.defaultComponents.includes(component.id);
    
    if (isExcluded) {
        card.classList.add('excluded');
    }
    
    if (isDefault) {
        card.classList.add('default-selected');
        selectedComponents.add(component.id);
    }
    
    card.innerHTML = `
        <div class="component-checkbox ${isDefault ? 'checked' : ''}" onclick="toggleComponent('${component.id}')"></div>
        <div class="component-info">
            <div class="component-name">${component.name}</div>
            <div class="component-description">${component.description}</div>
            <div class="component-features">
                <span class="feature-tag">${t(`categories.${component.category}`)}</span>
                ${isExcluded ? '<span class="exclusion-warning">–ò—Å–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</span>' : ''}
                ${component.id === 'buzzer' && (currentPrinterModel === 'k1s' || currentPrinterModel === 'k1se') ? '<span class="buzzer-warning"><strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ó—É–º–º–µ—Ä –Ω–µ –ø—Ä–∏–ø–∞—è–Ω –Ω–∞ –ø–ª–∞—Ç–µ –≤ K1S/K1SE</span>' : ''}
            </div>
        </div>
        <div class="component-actions">
            <button class="help-btn" onclick="showHelp('${component.id}')" title="–°–ø—Ä–∞–≤–∫–∞">‚ùì</button>
        </div>
    `;
    
    return card;
}

// Toggle component selection
function toggleComponent(componentId) {
    const checkbox = document.querySelector(`#component-${componentId} .component-checkbox`);
    const card = document.getElementById(`component-${componentId}`);
    
    if (selectedComponents.has(componentId)) {
        selectedComponents.delete(componentId);
        checkbox.classList.remove('checked');
        card.classList.remove('selected');
    } else {
        selectedComponents.add(componentId);
        checkbox.classList.add('checked');
        card.classList.add('selected');
    }
    
    updateBatchStats();
}

// Update batch install stats
function updateBatchStats() {
    const selectedCount = document.getElementById('selectedCount');
    const totalCount = document.getElementById('totalCount');
    
    if (selectedCount) {
        selectedCount.textContent = selectedComponents.size;
    }
    
    if (totalCount) {
        const availableComponents = getAvailableComponents();
        totalCount.textContent = availableComponents.length;
    }
}

// Select all components
function selectAllComponents() {
    const availableComponents = getAvailableComponents();
    availableComponents.forEach(component => {
        if (!printerConfigs[currentPrinterModel]?.excludedComponents?.includes(component.id)) {
            selectedComponents.add(component.id);
            const checkbox = document.querySelector(`#component-${component.id} .component-checkbox`);
            const card = document.getElementById(`component-${component.id}`);
            if (checkbox) checkbox.classList.add('checked');
            if (card) card.classList.add('selected');
        }
    });
    updateBatchStats();
}

// Select none components
function selectNoneComponents() {
    selectedComponents.clear();
    document.querySelectorAll('.component-checkbox').forEach(checkbox => {
        checkbox.classList.remove('checked');
    });
    document.querySelectorAll('.component-card').forEach(card => {
        card.classList.remove('selected');
    });
    updateBatchStats();
}

// Log functions
function addLogEntry(logContainer, message, type = 'info') {
    const logContent = document.getElementById(logContainer);
    if (!logContent) return;
    
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry ${type}`;
    logEntry.innerHTML = `
        <span class="log-timestamp">[${timestamp}]</span>
        <span class="log-message">${message}</span>
    `;
    
    logContent.appendChild(logEntry);
    logContent.scrollTop = logContent.scrollHeight;
}

function showInstallLog() {
    const installLog = document.getElementById('installLog');
    if (installLog) {
        installLog.style.display = 'block';
    }
}

function showRemoveLog() {
    const removeLog = document.getElementById('removeLog');
    if (removeLog) {
        removeLog.style.display = 'block';
    }
}

function clearInstallLog() {
    const logContent = document.getElementById('installLogContent');
    if (logContent) {
        logContent.innerHTML = '';
    }
}

function clearRemoveLog() {
    const logContent = document.getElementById('removeLogContent');
    if (logContent) {
        logContent.innerHTML = '';
    }
}

// Install selected components
async function installSelectedComponents() {
    if (selectedComponents.size === 0) {
        showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏', 'warning');
        return;
    }
    
    if (!isConnected) {
        showMessage('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É', 'error');
        return;
    }
    
    showMessage(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${selectedComponents.size} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...`, 'info');
    showInstallLog();
    addLogEntry('installLogContent', `–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É ${selectedComponents.size} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...`, 'info');
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const componentId of selectedComponents) {
        try {
            const component = components.find(c => c.id === componentId);
            const componentName = component ? component.name : componentId;
            
            addLogEntry('installLogContent', `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${componentName}...`, 'info');
            await installComponent(componentId);
            addLogEntry('installLogContent', `‚úÖ ${componentName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`, 'success');
            successCount++;
        } catch (error) {
            console.error(`Error installing ${componentId}:`, error);
            addLogEntry('installLogContent', `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${componentId}: ${error.message}`, 'error');
            showMessage(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${componentId}: ${error.message}`, 'error');
            errorCount++;
        }
    }
    
    addLogEntry('installLogContent', `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`, successCount > 0 ? 'success' : 'error');
    showMessage(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`, successCount > 0 ? 'success' : 'error');
}

// Check SSH connection
async function checkSSHConnection() {
    try {
        const result = await safeInvoke('ssh-exec', 'echo "connection_test"');
        return result.success;
    } catch (error) {
        console.warn('SSH connection check failed:', error);
        return false;
    }
}

// Retry SSH command with exponential backoff
async function retrySSHCommand(command, maxRetries = 3) {
    for (let i = 0; i < maxRetries; i++) {
        try {
            const result = await safeInvoke('ssh-exec', command);
            if (result.success) {
                return result;
            }
        } catch (error) {
            console.warn(`SSH command attempt ${i + 1} failed:`, error);
            if (i === maxRetries - 1) {
                throw error;
            }
            // Wait before retry
            await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
        }
    }
}

// Ensure helper scripts are available on printer
async function ensureHelperScripts() {
    try {
        // Check if we're connected first
        if (!isConnected) {
            throw new Error('Not connected to printer');
        }
        
        // Verify SSH connection is actually working
        const connectionOk = await checkSSHConnection();
        if (!connectionOk) {
            throw new Error('SSH connection is not working properly');
        }
        
        // Check if scripts exist in /usr/data/helper-script/
        const checkResult = await safeInvoke('ssh-exec', 'test -f /usr/data/helper-script/scripts/original_helper.sh && echo "exists" || echo "missing"');
        
        if (checkResult.success && checkResult.stdout.includes('exists')) {
            return true; // Scripts already exist
        }
        
        // Scripts don't exist, need to upload them
        showMessage('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ helper-script –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä...', 'info');
        
        // First, create directory structure
        const mkdirResult = await safeInvoke('ssh-exec', 'mkdir -p /usr/data/helper-script/scripts /usr/data/helper-script/files/fixes /usr/data/helper-script/files/camera-settings /usr/data/helper-script/files/moonraker /usr/data/helper-script/files/fluidd-logos /usr/data/helper-script/files/macros /usr/data/helper-script/files/services');
        
        if (!mkdirResult.success) {
            throw new Error('Failed to create directory structure: ' + mkdirResult.stderr);
        }
        
        // Upload essential scripts to /tmp/ first
        const tempScripts = [
            'original_helper.sh',
            'tools.sh',
            'check_firmware.sh',
            'check_installed.sh',
            'install_components.sh',
            'factory_reset.sh'
        ];
        
        let uploadedCount = 0;
        
        for (const script of tempScripts) {
            try {
                // Read file content from local filesystem
                const fileContent = await safeInvoke('read-file', `scripts/${script}`);
                
                if (fileContent.success) {
                    // Try SSH heredoc first
                    let uploadResult = await safeInvoke('ssh-exec', `cat > /usr/data/helper-script/scripts/${script} << 'EOF'
${fileContent.content}
EOF`);
                    
                    // If heredoc fails, try base64 method
                    if (!uploadResult.success) {
                        console.log(`Heredoc failed for ${script}, trying base64 method...`);
                        const base64Content = btoa(unescape(encodeURIComponent(fileContent.content)));
                        uploadResult = await safeInvoke('ssh-exec', `echo '${base64Content}' | base64 -d > /usr/data/helper-script/scripts/${script}`);
                    }
                    
                    if (uploadResult.success) {
                        // Make it executable
                        const chmodResult = await safeInvoke('ssh-exec', `chmod +x /usr/data/helper-script/scripts/${script}`);
                        
                        if (chmodResult.success) {
                            uploadedCount++;
                        } else {
                            console.warn(`Failed to make ${script} executable:`, chmodResult.stderr);
                            uploadedCount++; // Still count as uploaded
                        }
                    } else {
                        console.warn(`Failed to upload ${script}:`, uploadResult.stderr);
                    }
                } else {
                    console.warn(`Failed to read ${script}:`, fileContent.error);
                }
            } catch (error) {
                console.warn(`Error processing ${script}:`, error);
            }
        }
        
        if (uploadedCount > 0) {
            showMessage(`–°–∫—Ä–∏–ø—Ç—ã helper-script –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä! (${uploadedCount}/${tempScripts.length})`, 'success');
            return true;
        } else {
            throw new Error('Failed to upload any scripts');
        }
        
    } catch (error) {
        console.error('Error ensuring helper scripts:', error);
        showMessage('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã: ' + error.message, 'warning');
        return false; // Return false instead of throwing
    }
}

// Install single component
async function installComponent(componentId) {
    if (!componentId || typeof componentId !== 'string') {
        throw new Error('Invalid component ID');
    }
    
    // Validate component ID to prevent XSS
    const validIdRegex = /^[a-zA-Z0-9_-]+$/;
    if (!validIdRegex.test(componentId)) {
        throw new Error('Invalid component ID format');
    }
    
    // Ensure helper scripts are available
    const scriptsAvailable = await ensureHelperScripts();
    if (!scriptsAvailable) {
        throw new Error('Helper scripts are not available. Please check your connection and try again.');
    }
    
    // Map component IDs to script names
    const componentMap = {
        'moonraker-nginx': 'moonraker-nginx',
        'fluidd': 'fluidd',
        'mainsail': 'mainsail',
        'entware': 'entware',
        'gcode-shell-command': 'gcode-shell-command',
        'kamp': 'kamp',
        'buzzer': 'buzzer',
        'nozzle-cleaning': 'nozzle-cleaning',
        'fans-control': 'fans-control',
        'improved-shapers': 'improved-shapers',
        'useful-macros': 'useful-macros',
        'save-zoffset': 'save-zoffset',
        'screws-tilt-adjust': 'screws-tilt-adjust',
        'm600-support': 'm600-support',
        'git-backup': 'git-backup',
        'moonraker-timelapse': 'moonraker-timelapse',
        'camera-settings': 'camera-settings',
        'usb-camera': 'usb-camera',
        'octoeverywhere': 'octoeverywhere',
        'moonraker-obico': 'moonraker-obico',
        'guppyflo': 'guppyflo',
        'mobileraker': 'mobileraker',
        'octoapp': 'octoapp',
        'simplyprint': 'simplyprint'
    };
    
    const scriptName = componentMap[componentId];
    if (!scriptName) {
        throw new Error(`Unknown component: ${componentId}`);
    }
    
    // Use the new install_components.sh script
    const result = await safeInvoke('ssh-exec', `bash /usr/data/helper-script/scripts/install_components.sh install ${scriptName}`);
    
    if (!result.success) {
        throw new Error(result.stderr || result.stdout || 'Installation failed');
    }
    
    return result;
}

// Load installed components for remove page
// Load installed components for removal
async function loadInstalledComponents() {
    const installedContainer = document.getElementById('installedComponents');
    if (!installedContainer) return;
    
    if (!isConnected) {
        installedContainer.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É</p>';
        return;
    }
    
    // Show loading state
    installedContainer.innerHTML = '<p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...</p>';
    
    try {
        // Get list of installed components
        const installedComponents = await getInstalledComponents();
        
        if (installedComponents.length === 0) {
            installedContainer.innerHTML = '<p>–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>';
            updateRemoveStats();
            return;
        }
        
        // Clear container
        installedContainer.innerHTML = '';
        
        // Create cards for each installed component
        installedComponents.forEach(component => {
            const componentCard = createInstalledComponentCard(component);
            installedContainer.appendChild(componentCard);
        });
        
        updateRemoveStats();
        
    } catch (error) {
        console.error('Error loading installed components:', error);
        installedContainer.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>';
    }
}

// Get list of installed components via SSH
async function getInstalledComponents() {
    try {
        // Ensure helper scripts are available
        await ensureHelperScripts();
        
        // Use the new check_installed.sh script to get all components at once
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/check_installed.sh all');
        
        if (!result.success) {
            throw new Error(result.stderr || 'Failed to check installed components');
        }
        
        // Parse JSON response
        const installedStatus = JSON.parse(result.stdout);
        const installedComponents = [];
        
        // Map the results to our component objects
        for (const component of components) {
            const componentId = component.id;
            if (installedStatus[componentId] === 'installed') {
                installedComponents.push(component);
            }
        }
        
        return installedComponents;
        
    } catch (error) {
        console.error('Error getting installed components:', error);
        
        // Fallback to individual checks
    const installedComponents = [];
    
    // Check for each component if it's installed
    for (const component of components) {
        try {
            const isInstalled = await checkComponentInstalled(component);
            if (isInstalled) {
                installedComponents.push(component);
            }
        } catch (error) {
            console.error(`Error checking component ${component.id}:`, error);
        }
    }
    
    return installedComponents;
    }
}

// Check if a specific component is installed
async function checkComponentInstalled(component) {
    try {
        // Map component IDs to script names
        const componentMap = {
            'moonraker-nginx': 'moonraker-nginx',
            'fluidd': 'fluidd',
            'mainsail': 'mainsail',
            'entware': 'entware',
            'gcode-shell-command': 'gcode-shell-command',
            'kamp': 'kamp',
            'buzzer': 'buzzer',
            'nozzle-cleaning': 'nozzle-cleaning',
            'fans-control': 'fans-control',
            'improved-shapers': 'improved-shapers',
            'useful-macros': 'useful-macros',
            'save-zoffset': 'save-zoffset',
            'screws-tilt-adjust': 'screws-tilt-adjust',
            'm600-support': 'm600-support',
            'git-backup': 'git-backup',
            'moonraker-timelapse': 'moonraker-timelapse',
            'camera-settings': 'camera-settings',
            'usb-camera': 'usb-camera',
            'octoeverywhere': 'octoeverywhere',
            'moonraker-obico': 'moonraker-obico',
            'guppyflo': 'guppyflo',
            'mobileraker': 'mobileraker',
            'octoapp': 'octoapp',
            'simplyprint': 'simplyprint'
        };
        
        const scriptName = componentMap[component.id];
        if (!scriptName) {
            return false;
        }
        
        // Use the new check_installed.sh script to check installation status
        const result = await safeInvoke('ssh-exec', `bash /usr/data/helper-script/scripts/check_installed.sh ${scriptName}`);
        
        return result.stdout.includes('installed');
        
    } catch (error) {
        console.error(`Error checking component ${component.id}:`, error);
        return false;
    }
}

// Create card for installed component
function createInstalledComponentCard(component) {
    const card = document.createElement('div');
    card.className = 'component-card';
    card.id = `installed-${component.id}`;
    
    card.innerHTML = `
        <div class="component-checkbox" onclick="toggleInstalledComponent('${component.id}')"></div>
        <div class="component-info">
            <div class="component-name">${component.name}</div>
            <div class="component-description">${component.description}</div>
            <div class="component-features">
                <span class="feature-tag">${t(`categories.${component.category}`)}</span>
                <span class="installed-tag">–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span>
            </div>
        </div>
        <div class="component-actions">
            <button class="help-btn" onclick="showHelp('${component.id}')" title="–°–ø—Ä–∞–≤–∫–∞">‚ùì</button>
        </div>
    `;
    
    return card;
}

// Toggle installed component selection
function toggleInstalledComponent(componentId) {
    const checkbox = document.querySelector(`#installed-${componentId} .component-checkbox`);
    const card = document.getElementById(`installed-${componentId}`);
    
    if (selectedForRemoval.has(componentId)) {
        selectedForRemoval.delete(componentId);
        checkbox.classList.remove('checked');
        card.classList.remove('selected');
    } else {
        selectedForRemoval.add(componentId);
        checkbox.classList.add('checked');
        card.classList.add('selected');
    }
    
    updateRemoveStats();
}

// Update remove statistics
function updateRemoveStats() {
    const selectedCount = document.getElementById('removeSelectedCount');
    const totalCount = document.getElementById('removeTotalCount');
    
    if (selectedCount) {
        selectedCount.textContent = selectedForRemoval.size;
    }
    
    if (totalCount) {
        const installedCards = document.querySelectorAll('#installedComponents .component-card');
        totalCount.textContent = installedCards.length;
    }
}

// Select all installed components
function selectAllInstalled() {
    const installedCards = document.querySelectorAll('#installedComponents .component-card');
    installedCards.forEach(card => {
        const componentId = card.id.replace('installed-', '');
        selectedForRemoval.add(componentId);
        const checkbox = card.querySelector('.component-checkbox');
        checkbox.classList.add('checked');
        card.classList.add('selected');
    });
    updateRemoveStats();
}

// Deselect all installed components
function selectNoneInstalled() {
    selectedForRemoval.clear();
    document.querySelectorAll('#installedComponents .component-checkbox').forEach(checkbox => {
        checkbox.classList.remove('checked');
    });
    document.querySelectorAll('#installedComponents .component-card').forEach(card => {
        card.classList.remove('selected');
    });
    updateRemoveStats();
}

// Remove selected components
async function removeSelectedComponents() {
    if (selectedForRemoval.size === 0) {
        showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!confirm(t('remove.confirm_remove'))) {
        return;
    }
    
    const removeBtn = document.querySelector('button[onclick="removeSelectedComponents()"]');
    const originalText = removeBtn.innerHTML;
    
    // Show loading state
    removeBtn.innerHTML = 'üóëÔ∏è <span class="loading"></span> –£–¥–∞–ª–µ–Ω–∏–µ...';
    removeBtn.disabled = true;
    
    try {
        showRemoveLog();
        addLogEntry('removeLogContent', `–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ ${selectedForRemoval.size} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...`, 'info');
        
        let successCount = 0;
        let errorCount = 0;
        
        for (const componentId of selectedForRemoval) {
            try {
                const component = components.find(c => c.id === componentId);
                const componentName = component ? component.name : componentId;
                
                addLogEntry('removeLogContent', `–£–¥–∞–ª–µ–Ω–∏–µ ${componentName}...`, 'info');
                await removeComponent(componentId);
                addLogEntry('removeLogContent', `‚úÖ ${componentName} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`, 'success');
                successCount++;
                
                // Remove from UI
                const card = document.getElementById(`installed-${componentId}`);
                if (card) {
                    card.remove();
                }
                
            } catch (error) {
                console.error(`Error removing ${componentId}:`, error);
                addLogEntry('removeLogContent', `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${componentId}: ${error.message}`, 'error');
                errorCount++;
            }
        }
        
        addLogEntry('removeLogContent', `–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`, successCount > 0 ? 'success' : 'error');
        
        // Clear selection
        selectedForRemoval.clear();
        updateRemoveStats();
        
        if (successCount > 0) {
            showMessage(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${successCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`, 'success');
        }
        
        if (errorCount > 0) {
            showMessage(`–û—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${errorCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`, 'warning');
        }
        
    } catch (error) {
        console.error('Error removing components:', error);
        showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ' + error.message, 'error');
    } finally {
        // Restore button state
        removeBtn.innerHTML = originalText;
        removeBtn.disabled = false;
    }
}

// Remove specific component
async function removeComponent(componentId) {
    if (!componentId || typeof componentId !== 'string') {
        throw new Error('Invalid component ID');
    }
    
    // Validate component ID to prevent XSS
    const validIdRegex = /^[a-zA-Z0-9_-]+$/;
    if (!validIdRegex.test(componentId)) {
        throw new Error('Invalid component ID format');
    }
    
    // Ensure helper scripts are available
    const scriptsAvailable = await ensureHelperScripts();
    if (!scriptsAvailable) {
        throw new Error('Helper scripts are not available. Please check your connection and try again.');
    }
    
    // Map component IDs to script names
    const componentMap = {
        'moonraker-nginx': 'moonraker-nginx',
        'fluidd': 'fluidd',
        'mainsail': 'mainsail',
        'entware': 'entware',
        'gcode-shell-command': 'gcode-shell-command',
        'kamp': 'kamp',
        'buzzer': 'buzzer',
        'nozzle-cleaning': 'nozzle-cleaning',
        'fans-control': 'fans-control',
        'improved-shapers': 'improved-shapers',
        'useful-macros': 'useful-macros',
        'save-zoffset': 'save-zoffset',
        'screws-tilt-adjust': 'screws-tilt-adjust',
        'm600-support': 'm600-support',
        'git-backup': 'git-backup',
        'moonraker-timelapse': 'moonraker-timelapse',
        'camera-settings': 'camera-settings',
        'usb-camera': 'usb-camera',
        'octoeverywhere': 'octoeverywhere',
        'moonraker-obico': 'moonraker-obico',
        'guppyflo': 'guppyflo',
        'mobileraker': 'mobileraker',
        'octoapp': 'octoapp',
        'simplyprint': 'simplyprint'
    };
    
    const scriptName = componentMap[componentId];
    if (!scriptName) {
        throw new Error(`Unknown component: ${componentId}`);
    }
    
    // Use the new install_components.sh script for removal
    const result = await safeInvoke('ssh-exec', `bash /usr/data/helper-script/scripts/install_components.sh remove ${scriptName}`);
    
    if (!result.success) {
        throw new Error(result.stderr || result.stdout || 'Removal failed');
    }
    
    return result;
}

// Load customize options
function loadCustomizeOptions() {
    const customizeContainer = document.getElementById('customizeOptions');
    if (!customizeContainer) return;
    
    // Clear any existing content
    customizeContainer.innerHTML = '';
    
    // Update language for any existing content
    updateLanguage();
}

// System Information Tool
async function showSystemInfo() {
    const container = document.getElementById('customizeOptions');
    if (!container) return;
    
    if (!isConnected) {
        container.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É</p>';
        return;
    }
    
    container.innerHTML = '<div class="loading-container"><span class="loading"></span> –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ...</div>';
    
    try {
        const systemInfo = await getSystemInfo();
        container.innerHTML = `
            <div class="info-section">
                <h3>üìä ${getLocalizedText('customize.system_info')}</h3>
                <div class="info-grid">
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.printer_model')}</h4>
                        <p><strong>${systemInfo.printerModel || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.kernel_version')}</h4>
                        <p><strong>${systemInfo.firmwareVersion || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.klipper_version')}</h4>
                        <p><strong>${systemInfo.klipperVersion || getLocalizedText('customize.system.not_installed')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.moonraker_version')}</h4>
                        <p><strong>${systemInfo.moonrakerVersion || getLocalizedText('customize.system.not_installed')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.fluidd_version')}</h4>
                        <p><strong>${systemInfo.fluiddVersion || getLocalizedText('customize.system.not_installed')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.mainsail_version')}</h4>
                        <p><strong>${systemInfo.mainsailVersion || getLocalizedText('customize.system.not_installed')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.os_version')}</h4>
                        <p><strong>${systemInfo.osVersion || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.architecture')}</h4>
                        <p><strong>${systemInfo.architecture || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.uptime')}</h4>
                        <p><strong>${systemInfo.uptime || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.memory')}</h4>
                        <p><strong>${systemInfo.memory || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.disk')}</h4>
                        <p><strong>${systemInfo.diskUsage || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                    <div class="info-card">
                        <h4>${getLocalizedText('customize.system.cpu_load')}</h4>
                        <p><strong>${systemInfo.cpuLoad || getLocalizedText('customize.system.unknown')}</strong></p>
                    </div>
                </div>
                ${systemInfo.rawOutput ? `
                <div class="raw-output">
                    <h4>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</h4>
                    <pre>${systemInfo.rawOutput}</pre>
                </div>
                ` : ''}
            </div>
        `;
        updateLanguage();
    } catch (error) {
        console.error('Error loading system info:', error);
        container.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ</p>';
    }
}

// Get system information using original script
async function getSystemInfo() {
    const info = {};
    
    try {
        // Check connection first
        if (!isConnected) {
            throw new Error('Not connected to printer');
        }
        
        // Get basic system info one by one to avoid connection issues
        let modelResult, kernelResult, uptimeResult, memoryResult, diskResult, loadResult;
        
        try {
            modelResult = await retrySSHCommand('cat /proc/device-tree/model 2>/dev/null || echo "Unknown"');
        } catch (e) {
            console.warn('Model detection failed:', e);
            modelResult = { stdout: 'Unknown' };
        }
        
        try {
            kernelResult = await retrySSHCommand('uname -r');
        } catch (e) {
            console.warn('Kernel detection failed:', e);
            kernelResult = { stdout: 'Unknown' };
        }
        
        try {
            uptimeResult = await retrySSHCommand('uptime');
        } catch (e) {
            console.warn('Uptime detection failed:', e);
            uptimeResult = { stdout: 'Unknown' };
        }
        
        try {
            memoryResult = await retrySSHCommand('free -h');
        } catch (e) {
            console.warn('Memory detection failed:', e);
            memoryResult = { stdout: 'Unknown' };
        }
        
        try {
            diskResult = await retrySSHCommand('df -h');
        } catch (e) {
            console.warn('Disk detection failed:', e);
            diskResult = { stdout: 'Unknown' };
        }
        
        try {
            loadResult = await retrySSHCommand('cat /proc/loadavg');
        } catch (e) {
            console.warn('Load detection failed:', e);
            loadResult = { stdout: 'Unknown' };
        }
        
        // Parse results
        info.printerModel = modelResult.stdout?.trim() || (currentPrinterModel ? printerConfigs[currentPrinterModel]?.name : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
        info.firmwareVersion = kernelResult.stdout?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        info.uptime = uptimeResult.stdout?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        // Parse memory info
        if (memoryResult.stdout) {
            const memLines = memoryResult.stdout.split('\n');
            const memLine = memLines.find(line => line.includes('Mem:'));
            if (memLine) {
                const parts = memLine.split(/\s+/);
                info.memory = `${parts[2]}/${parts[1]}`;
            } else {
                info.memory = memoryResult.stdout.trim();
            }
        } else {
            info.memory = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        // Parse disk info
        if (diskResult.stdout) {
            const diskLines = diskResult.stdout.split('\n');
            const rootLine = diskLines.find(line => line.includes('/'));
            if (rootLine) {
                const parts = rootLine.split(/\s+/);
                info.diskUsage = `${parts[2]}/${parts[1]} (${parts[4]})`;
            } else {
                info.diskUsage = diskResult.stdout.trim();
            }
        } else {
            info.diskUsage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        // Parse CPU load
        if (loadResult.stdout) {
            const loadParts = loadResult.stdout.trim().split(' ');
            info.cpuLoad = `${loadParts[0]}, ${loadParts[1]}, ${loadParts[2]}`;
        } else {
            info.cpuLoad = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        info.osVersion = 'BusyBox Linux';
        info.architecture = 'ARM';
        
        // Ensure helper scripts are available
        try {
            await ensureHelperScripts();
        } catch (e) {
            console.warn('Could not ensure helper scripts:', e);
        }
        
        // Get firmware version using new script
        try {
            const firmwareResult = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/check_firmware.sh firmware');
            info.firmwareVersion = firmwareResult.stdout.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        } catch (e) {
            info.firmwareVersion = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        // Get Klipper and Moonraker versions using new script
        try {
            const klipperResult = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/check_firmware.sh klipper');
            info.klipperVersion = klipperResult.stdout.trim() || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        } catch (e) {
            info.klipperVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        }
        
        try {
            const moonrakerResult = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/check_firmware.sh moonraker');
            info.moonrakerVersion = moonrakerResult.stdout.trim() || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        } catch (e) {
            info.moonrakerVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        }
        
        // Get Fluidd and Mainsail versions
        try {
            const fluiddResult = await safeInvoke('ssh-exec', 'cat /usr/share/nginx/html/fluidd/version 2>/dev/null || echo "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"');
            info.fluiddVersion = fluiddResult.stdout.trim();
        } catch (e) {
            info.fluiddVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        }
        
        try {
            const mainsailResult = await safeInvoke('ssh-exec', 'cat /usr/share/nginx/html/mainsail/version 2>/dev/null || echo "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"');
            info.mainsailVersion = mainsailResult.stdout.trim();
        } catch (e) {
            info.mainsailVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        }
        
    } catch (error) {
        console.error('Error getting system info:', error);
        // Fallback to basic info
        info.printerModel = currentPrinterModel ? printerConfigs[currentPrinterModel]?.name : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
        info.firmwareVersion = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        info.osVersion = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        info.architecture = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        info.klipperVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        info.moonrakerVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        info.fluiddVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        info.mainsailVersion = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    }
    
    return info;
}

// Logs Viewer Tool
async function showLogsViewer() {
    const container = document.getElementById('customizeOptions');
    if (!container) return;
    
    if (!isConnected) {
        container.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É</p>';
        return;
    }
    
    container.innerHTML = `
        <div class="logs-section">
            <h3>üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤</h3>
            <div class="logs-controls">
                <button class="btn btn-primary" onclick="loadLogs('klipper')">–õ–æ–≥–∏ Klipper</button>
                <button class="btn btn-primary" onclick="loadLogs('moonraker')">–õ–æ–≥–∏ Moonraker</button>
                <button class="btn btn-primary" onclick="loadLogs('system')">–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</button>
                <button class="btn btn-warning" onclick="clearLogs()">–û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
            <div class="logs-content">
                <pre id="logsOutput">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</pre>
            </div>
        </div>
    `;
    updateLanguage();
}

// Load specific logs using simple SSH commands
async function loadLogs(logType) {
    const output = document.getElementById('logsOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...';
    
    try {
        let command = '';
        
        switch (logType) {
            case 'klipper':
                command = 'journalctl -u klipper --no-pager -n 100';
                break;
            case 'moonraker':
                command = 'journalctl -u moonraker --no-pager -n 100';
                break;
            case 'system':
                command = 'journalctl --no-pager -n 100';
                break;
            default:
                command = 'echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–æ–≥–æ–≤"';
        }
        
        const result = await safeInvoke('ssh-exec', command);
        output.textContent = result.stdout || result.stderr || '–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        
    } catch (error) {
        console.error('Error loading logs:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ' + error.message;
    }
}

// Clear logs display
function clearLogs() {
    const output = document.getElementById('logsOutput');
    if (output) {
        output.textContent = '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã';
    }
}

// Service Management Tool
async function showServiceManager() {
    const container = document.getElementById('customizeOptions');
    if (!container) return;
    
    if (!isConnected) {
        container.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É</p>';
        return;
    }
    
    container.innerHTML = `
        <div class="services-section">
            <h3>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏</h3>
            <div class="services-grid">
                <div class="service-card">
                    <h4>Klipper</h4>
                    <div class="service-actions">
                        <button class="btn btn-success" onclick="manageService('klipper', 'start')">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                        <button class="btn btn-warning" onclick="manageService('klipper', 'stop')">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                        <button class="btn btn-primary" onclick="manageService('klipper', 'restart')">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
                    </div>
                </div>
                <div class="service-card">
                    <h4>Moonraker</h4>
                    <div class="service-actions">
                        <button class="btn btn-success" onclick="manageService('moonraker', 'start')">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                        <button class="btn btn-warning" onclick="manageService('moonraker', 'stop')">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                        <button class="btn btn-primary" onclick="manageService('moonraker', 'restart')">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
                    </div>
                </div>
                <div class="service-card">
                    <h4>Nginx</h4>
                    <div class="service-actions">
                        <button class="btn btn-success" onclick="manageService('nginx', 'start')">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                        <button class="btn btn-warning" onclick="manageService('nginx', 'stop')">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                        <button class="btn btn-primary" onclick="manageService('nginx', 'restart')">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
                    </div>
                </div>
                <div class="service-card">
                    <h4>Fluidd</h4>
                    <div class="service-actions">
                        <button class="btn btn-success" onclick="manageService('fluidd', 'start')">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                        <button class="btn btn-warning" onclick="manageService('fluidd', 'stop')">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                        <button class="btn btn-primary" onclick="manageService('fluidd', 'restart')">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    updateLanguage();
}

// Manage service using simple SSH commands
async function manageService(serviceName, action) {
    try {
        // Use simple systemctl commands
        const result = await safeInvoke('ssh-exec', `systemctl ${action} ${serviceName}`);
        
        if (result.success) {
            showMessage(`–°–µ—Ä–≤–∏—Å ${serviceName} ${action === 'start' ? '–∑–∞–ø—É—â–µ–Ω' : action === 'stop' ? '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω'}`, 'success');
        } else {
            showMessage(`–û—à–∏–±–∫–∞: ${result.stderr || result.error}`, 'error');
        }
        
    } catch (error) {
        console.error(`Error managing service ${serviceName}:`, error);
        showMessage(`–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º ${serviceName}: ${error.message}`, 'error');
    }
}

// File Manager Tool
async function showFileManager() {
    const container = document.getElementById('customizeOptions');
    if (!container) return;
    
    if (!isConnected) {
        container.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É</p>';
        return;
    }
    
    container.innerHTML = `
        <div class="file-manager-section">
            <h3>üìÅ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä</h3>
            <div class="file-manager-controls">
                <button class="btn btn-primary" onclick="listConfigFiles()">–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</button>
                <button class="btn btn-primary" onclick="listLogFiles()">–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤</button>
                <button class="btn btn-warning" onclick="clearFileManager()">–û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
            <div class="file-manager-content">
                <pre id="fileManagerOutput">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤</pre>
            </div>
        </div>
    `;
    updateLanguage();
}

// List config files using simple SSH commands
async function listConfigFiles() {
    const output = document.getElementById('fileManagerOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...';
    
    try {
        // List common config directories
        const result = await safeInvoke('ssh-exec', 'find /usr/data/printer_data -name "*.cfg" -o -name "*.conf" 2>/dev/null | head -20');
        output.textContent = result.stdout || '–§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        
    } catch (error) {
        console.error('Error listing config files:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ' + error.message;
    }
}

// List log files using original script
async function listLogFiles() {
    const output = document.getElementById('fileManagerOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...';
    
    try {
        // List common log directories
        const result = await safeInvoke('ssh-exec', 'find /var/log -name "*.log" 2>/dev/null | head -20');
        output.textContent = result.stdout || '–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        
    } catch (error) {
        console.error('Error listing log files:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ' + error.message;
    }
}

// Clear file manager
function clearFileManager() {
    const output = document.getElementById('fileManagerOutput');
    if (output) {
        output.textContent = '–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–∏—â–µ–Ω';
    }
}

// Network Tools Tool
async function showNetworkTools() {
    const container = document.getElementById('customizeOptions');
    if (!container) return;
    
    if (!isConnected) {
        container.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É</p>';
        return;
    }
    
    container.innerHTML = `
        <div class="network-section">
            <h3>üåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
            <div class="network-controls">
                <button class="btn btn-primary" onclick="runNetworkDiagnostics()">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏</button>
                <button class="btn btn-primary" onclick="showNetworkInfo()">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏</button>
                <button class="btn btn-primary" onclick="testConnectivity()">–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</button>
            </div>
            <div class="network-content">
                <pre id="networkOutput">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏</pre>
            </div>
        </div>
    `;
    updateLanguage();
}

// Run network diagnostics using simple SSH commands
async function runNetworkDiagnostics() {
    const output = document.getElementById('networkOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏...';
    
    try {
        // Run basic network diagnostics
        const result = await safeInvoke('ssh-exec', 'ip addr show && echo "---" && ip route show && echo "---" && ping -c 3 8.8.8.8');
        output.textContent = result.stdout || result.stderr || '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        
    } catch (error) {
        console.error('Error running network diagnostics:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏: ' + error.message;
    }
}

// Show network info using original script
async function showNetworkInfo() {
    const output = document.getElementById('networkOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏...';
    
    try {
        // Get basic network information
        const result = await safeInvoke('ssh-exec', 'ifconfig && echo "---" && netstat -rn');
        output.textContent = result.stdout || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        
    } catch (error) {
        console.error('Error getting network info:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏: ' + error.message;
    }
}

// Test connectivity using original script
async function testConnectivity() {
    const output = document.getElementById('networkOutput');
    if (!output) return;
    
    output.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...';
    
    try {
        // Use original helper script for connectivity test
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/original_helper.sh network_diagnostics');
        output.textContent = result.stdout || result.stderr || '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω';
        
    } catch (error) {
        console.error('Error testing connectivity:', error);
        output.textContent = '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message;
    }
}

// Performance Monitor Tool
async function showPerformanceMonitor() {
    const container = document.getElementById('customizeOptions');
    if (!container) return;
    
    if (!isConnected) {
        container.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É</p>';
        return;
    }
    
    container.innerHTML = `
        <div class="performance-section">
            <h3>üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
            <div class="performance-controls">
                <button class="btn btn-primary" onclick="getSystemStats()">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</button>
                <button class="btn btn-primary" onclick="getMemoryUsage()">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏</button>
                <button class="btn btn-primary" onclick="getDiskUsage()">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞</button>
                <button class="btn btn-primary" onclick="getProcessList()">–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</button>
            </div>
            <div class="performance-content">
                <pre id="performanceOutput">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</pre>
            </div>
        </div>
    `;
    updateLanguage();
}

// Get system stats using simple SSH commands
async function getSystemStats() {
    const output = document.getElementById('performanceOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...';
    
    try {
        // Get basic system statistics
        const result = await safeInvoke('ssh-exec', 'uptime && echo "---" && free -h && echo "---" && df -h');
        output.textContent = result.stdout || '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        
    } catch (error) {
        console.error('Error getting system stats:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message;
    }
}

// Get memory usage using original script
async function getMemoryUsage() {
    const output = document.getElementById('performanceOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏...';
    
    try {
        // Get memory information
        const result = await safeInvoke('ssh-exec', 'free -h && echo "---" && cat /proc/meminfo | head -10');
        output.textContent = result.stdout || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        
    } catch (error) {
        console.error('Error getting memory usage:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: ' + error.message;
    }
}

// Get disk usage using original script
async function getDiskUsage() {
    const output = document.getElementById('performanceOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ...';
    
    try {
        // Get disk usage information
        const result = await safeInvoke('ssh-exec', 'df -h && echo "---" && du -sh /usr/data/* 2>/dev/null | head -10');
        output.textContent = result.stdout || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        
    } catch (error) {
        console.error('Error getting disk usage:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: ' + error.message;
    }
}

// Get process list using original script
async function getProcessList() {
    const output = document.getElementById('performanceOutput');
    if (!output) return;
    
    output.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...';
    
    try {
        // Get process list
        const result = await safeInvoke('ssh-exec', 'ps aux | head -20');
        output.textContent = result.stdout || '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        
    } catch (error) {
        console.error('Error getting process list:', error);
        output.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ' + error.message;
    }
}







// Create backup
async function createBackup() {
    if (!isConnected) {
        showMessage('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É', 'error');
        return;
    }
    
    try {
        const result = await safeInvoke('create-backup');
        if (result.success) {
            showMessage('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
        } else {
            showMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ' + result.error, 'error');
        }
    } catch (error) {
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ' + error.message, 'error');
    }
}

// Restore backup
async function restoreBackup() {
    if (!isConnected) {
        showMessage('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É', 'error');
        return;
    }
    
    try {
        const result = await safeInvoke('restore-backup');
        if (result.success) {
            showMessage('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
        } else {
            showMessage('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ' + result.error, 'error');
        }
    } catch (error) {
        showMessage('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ' + error.message, 'error');
    }
}

// Tool functions
async function runDiagnostic() {
    showMessage('–§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info');
}

async function updateFirmware() {
    showMessage('–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info');
}

async function viewLogs() {
    showMessage('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info');
}

async function systemInfo() {
    showMessage('–§—É–Ω–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info');
}

// Help modal functions
async function showHelp(componentId) {
    const helpModal = document.getElementById('helpModal');
    const helpContent = document.getElementById('helpContent');
    
    if (!helpModal || !helpContent) return;
    
    // Show modal immediately with loading state
    helpModal.classList.add('show');
    helpContent.innerHTML = '<div class="loading-container"><span class="loading"></span> –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–∫–∏...</div>';
    
    try {
        // Load help content using IPC
        let helpData = null;
        try {
            const result = await safeInvoke('read-file', 'src/help/help-content.json');
            if (result.success) {
                helpData = JSON.parse(result.content);
                console.log('Help content loaded from file');
                }
            } catch (e) {
            console.log('Failed to load help from file:', e.message);
        }
        
        if (!helpData) {
            // Fallback help content
            helpData = getFallbackHelpContent();
        }
        
        const componentHelp = helpData[currentLanguage]?.[componentId];
        
        if (componentHelp) {
            helpContent.innerHTML = `
                <div class="help-section">
                    <h3>${componentHelp.title}</h3>
                    <p><strong>${t('help.description')}:</strong> ${componentHelp.description}</p>
                    <p>${componentHelp.details}</p>
                    
                    <h4>${t('help.features')}:</h4>
                    <ul>
                        ${componentHelp.features.map(feature => `<li>${feature}</li>`).join('')}
                    </ul>
                    
                    <h4>${t('help.requirements')}:</h4>
                    <ul>
                        ${componentHelp.requirements.map(req => `<li>${req}</li>`).join('')}
                    </ul>
                    
                    ${componentHelp.warnings ? `
                        <div class="help-warning">
                            <h4>${t('help.warnings')}:</h4>
                            <ul>
                                ${componentHelp.warnings.map(warning => `<li>${warning}</li>`).join('')}
                            </ul>
                        </div>
                    ` : ''}
                    
                    <h4>${t('help.troubleshooting')}:</h4>
                    <ul>
                        ${componentHelp.troubleshooting.map(item => 
                            `<li><strong>${item.problem}:</strong> ${item.solution}</li>`
                        ).join('')}
                    </ul>
                </div>
            `;
        } else {
            helpContent.innerHTML = `
                <div class="help-section">
                    <h3>${t('help.component')}: ${componentId}</h3>
                    <p>${t('help.no_info')}</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading help content:', error);
        helpContent.innerHTML = `
            <div class="help-section">
                <h3>${t('help.error')}</h3>
                <p>${t('help.load_error')}</p>
            </div>
        `;
    }
}

function closeHelp() {
    const helpModal = document.getElementById('helpModal');
    if (helpModal) {
        helpModal.classList.remove('show');
    }
}

// ===== TOOLS FUNCTIONS =====

// Klipper Configuration Management
async function preventKlipperUpdates() {
    try {
        showLoading('toolsOptions', '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Klipper...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh prevent_klipper_updates');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üîí –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Klipper</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

async function allowKlipperUpdates() {
    try {
        showLoading('toolsOptions', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Klipper...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh allow_klipper_updates');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üîì –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Klipper</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Gcode Fix
async function fixGcodePrinting() {
    try {
        showLoading('toolsOptions', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏ Gcode —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh fix_gcode_printing');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏ Gcode —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Camera Settings
async function enableCameraSettings() {
    try {
        showLoading('toolsOptions', '–í–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã –≤ Moonraker...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh enable_camera_settings');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üì∑ –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã –≤ Moonraker</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

async function disableCameraSettings() {
    try {
        showLoading('toolsOptions', '–í—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã –≤ Moonraker...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh disable_camera_settings');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üì∑ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã –≤ Moonraker</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Service Restart Functions
async function restartNginx() {
    try {
        showLoading('toolsOptions', '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Nginx...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh restart_nginx');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Nginx</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

async function restartMoonraker() {
    try {
        showLoading('toolsOptions', '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Moonraker...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh restart_moonraker');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Moonraker</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

async function restartKlipper() {
    try {
        showLoading('toolsOptions', '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Klipper...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh restart_klipper');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Klipper</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Entware Update
async function updateEntware() {
    try {
        showLoading('toolsOptions', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ Entware...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh update_entware');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ Entware</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Cache and Logs
async function clearCache() {
    try {
        showLoading('toolsOptions', '–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh clear_cache');
        
        // Debug: log the result to see what we're getting
        console.log('Clear cache result:', result);
        
        const output = result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞';
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${output}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

async function clearLogs() {
    try {
        showLoading('toolsOptions', '–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh clear_logs');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Firmware Management
async function restoreFirmware() {
    try {
        showLoading('toolsOptions', '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–æ—à–∏–≤–∫–∏...');
        
        const result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/tools.sh restore_firmware');
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ—à–∏–≤–∫–∏</h3>
                <div class="raw-output">
                    <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Factory Reset
async function factoryReset() {
    if (!confirm(getLocalizedText('tools.factory_reset_warning'))) {
        return;
    }
    
    try {
        showLoading('toolsOptions', '–°–±—Ä–æ—Å –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...');
        
        // Try to use the standalone factory reset script first
        let result;
        try {
            result = await safeInvoke('ssh-exec', 'bash /usr/data/helper-script/scripts/factory_reset.sh reset');
            if (!result.success) {
                throw new Error('Factory reset script failed');
            }
        } catch (error) {
            // If the script is not available, use the direct command
            console.log('Factory reset script not found, using direct command...');
            
            // Step 1: Download the factory reset script
            const downloadResult = await safeInvoke('ssh-exec', 'wget --no-check-certificate https://raw.githubusercontent.com/pellcorp/creality/main/k1/services/S58factoryreset -O /tmp/S58factoryreset');
            if (!downloadResult.success) {
                throw new Error(`Failed to download factory reset script: ${downloadResult.stderr || downloadResult.error}`);
            }
            
            // Step 2: Make it executable
            const chmodResult = await safeInvoke('ssh-exec', 'chmod +x /tmp/S58factoryreset');
            if (!chmodResult.success) {
                throw new Error(`Failed to make script executable: ${chmodResult.stderr || chmodResult.error}`);
            }
            
            // Step 3: Execute the factory reset
            result = await safeInvoke('ssh-exec', '/tmp/S58factoryreset reset');
            if (!result.success) {
                throw new Error(`Factory reset failed: ${result.stderr || result.error || 'Unknown error'}`);
            }
        }
        
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>üè≠ ${getLocalizedText('tools.factory_reset')}</h3>
                <div class="raw-output">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                    <pre>${result?.stdout || result?.stderr || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}</pre>
                </div>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">${getLocalizedText('tools.back')}</button>
                </div>
            </div>
        `;
    } catch (error) {
        document.getElementById('toolsOptions').innerHTML = `
            <div class="info-section">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <div class="button-group">
                    <button class="btn btn-primary" onclick="clearToolsOptions()">–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;
    }
}

// Clear tools options
function clearToolsOptions() {
    document.getElementById('toolsOptions').innerHTML = '';
}
