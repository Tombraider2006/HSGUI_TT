#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
 * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç patch –≤–µ—Ä—Å–∏—é (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ) –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ
 */

const fs = require('fs');
const path = require('path');

const packageJsonPath = path.join(__dirname, '..', 'package.json');

try {
    // –ß–∏—Ç–∞–µ–º package.json
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const versionParts = packageJson.version.split('.');
    const major = parseInt(versionParts[0]) || 0;
    const minor = parseInt(versionParts[1]) || 0;
    const patch = parseInt(versionParts[2], 10) || 0;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é –Ω–∞ 1
    const newPatch = patch + 1;
    const newVersion = `${major}.${minor}.${newPatch}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    packageJson.version = newVersion;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ package.json
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
    
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞: ${packageJson.version}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º package.json –≤ staging area –¥–ª—è –∫–æ–º–º–∏—Ç–∞
    const { execSync } = require('child_process');
    try {
        execSync('git add package.json', { stdio: 'inherit' });
        console.log('üìù package.json –¥–æ–±–∞–≤–ª–µ–Ω –≤ staging area');
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å package.json –≤ staging area (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)');
    }
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏:', error.message);
    process.exit(1);
}
